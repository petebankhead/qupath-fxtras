plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

ext.moduleName = 'qupath.fxtras'
ext.jdkVersion = 17

archivesBaseName = 'qupath-fxtras'
description = "Extra classes built on JavaFX that are used to help create the QuPath user interface. " +
        "These don't depend on other QuPath modules, so can be reused elsewhere."

group = 'io.github.qupath'
version = '0.1.6'

tasks.named('compileJava') {
    // Use the project's version or define one directly
    options.javaModuleVersion = provider { version }
}

java {
    def version = project.findProperty('toolchain')
    if (!version) {
        version = jdkVersion
    } else if (version.strip() == 'skip')
        version = null
    if (version != null) {
        logger.info("Setting toolchain to {}", version)
        toolchain {
            languageVersion = JavaLanguageVersion.of(version)
        }
    }
    withSourcesJar()
    withJavadocJar()

    // Optional ControlsFX support
    java {
        registerFeature('controlsfx') {
            usingSourceSet(sourceSets.main)
        }
    }
}

javafx {
    version = 17
    modules = ["javafx.base",
               "javafx.controls",
               "javafx.graphics"]
    configurations = ['compileOnly', 'implementation', 'testImplementation']
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
 * Set encoding
 */
tasks.named('compileJava') {
    options.encoding = 'UTF-8'
}

/*
 * Manifest info
 */
jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": "io.github." + moduleName)
    }
}

/*
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')

tasks.withType(Javadoc).each { javadocTask ->
    if (!strictJavadoc) {
        javadocTask.options.addStringOption('Xdoclint:none', '-quiet')
    }
    javadocTask.options.encoding = 'UTF-8'
}


repositories {
    mavenCentral()
}

dependencies {
    api "org.slf4j:slf4j-api:2.0.0"

    // Optional ControlsFX support (used for notifications)
    controlsfxImplementation "org.controlsfx:controlsfx:11.1.2"

    testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"
    testImplementation "ch.qos.logback:logback-classic:1.3.11"
}


publishing {
    repositories {
        maven {
            name = "SciJava"
            def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
            def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
            // Use gradle -Prelease publish
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                licenses {
                    license {
                        name = 'Apache License v2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }
    }
}
